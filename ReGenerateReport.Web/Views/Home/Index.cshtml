@{
    ViewData["Title"] = "Home Page";
}


@*@Html.ActionLink("View Image", "PdfPartial")*@

<!DOCTYPE html>

<html>
<head>

    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <style type="text/css">
        body {
            font-family: Arial;
            font-size: 10pt;
        }

        table {
            border: 1px solid #ccc;
            border-collapse: collapse;
        }

            table th {
                background-color: #F7F7F7;
                color: #333;
                font-weight: bold;
            }

            table th, table td {
                padding: 5px;
                border: 1px solid #ccc;
            }

        #pdf_container {
            background: #ccc;
            text-align: center;
            display: none;
            padding: 5px;
            height: 820px;
            overflow: auto;
        }

        .gap-3 {
            margin-top: 10px
        }

        .stayleft {
            margin-left: 1px
        }

        iframe {
            border: 0;
            bottom: 0;
            height: 0px;
            left: 0;
            margin: 0;
            padding: 0;
            right: 0;
            top: 0;
            width: 100%;
        }

        .txt {
            /*font-weight: bold;
            font-family: "Times New Roman", Times, serif;*/
            font-style: normal;
        }
    </style>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/js/bootstrap.js" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/pdf_viewer.min.css" type="text/css" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-grid.css" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/switch-toggle.css" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/siteCss.css" />

</head>
<body>
    <br />
    <div class="container">
        <div class="form-group gap-3">
            <div style="color:white">1</div>
            <span>UserName : </span><span style="color:red;font-weight: bold;">@ViewBag.HostName</span>
            <input id="txtUserName" type="text" value=@ViewBag.HostName style="display:none" />
        </div>
        <div class="row gap-3">
            <div class="col-sm-2 gap-3">
                <label class="mr-sm-2 sr-only" for="inlineFormCustomSelect">Preference</label>
                <select class="custom-select mr-sm-2" id="inlineFormCustomSelect">
                    <option value="1" selected>POST</option>
                </select>
            </div>
            <div class="col-sm-8 gap-3">
                <input type="text" class="form-control" id="txtURL" placeholder="URL">
            </div>
            <div class="col-sm-2 gap-3">
                <input type="button" id="getData" class="btn btn-primary col-sm-12" onclick="GetData()" value="Send" />
            </div>
        </div>
        <div class="form-group gap-3" style="margin-top:20px">
            <div class="row">
                <div class="col-sm-6">
                    <label for="exampleFormControlTextarea1">JSON Body</label>
                </div>
                <div class="col-sm-6" style="text-align:right">
                    <button id="preview" type="button" class="btn btn-outline-secondary btn-sm" style="margin-bottom:5px" onclick="printTheJSONInPrettyFormat()">Beautify</button>
                </div>
            </div>
            <textarea class="form-control" id="prettyJSONFormat" rows="8"></textarea>
        </div>
    </div>
    <hr />
    <div class="container">
        <div class="row">
            <div class="col-md-12 pull-left">
                <div style="display:none">
                    <label class="switch">
                        <input id="chkPreview" type="checkbox" class="default">
                        <span class="slider"></span>
                    </label>
                    <span style="margin-left:20px">Preview</span>
                </div>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="row">
            <div id="divResponsePrettyJSONFormatLabel" class="col-md-10">
                <label for="exampleFormControlTextarea12" class="txt">Response</label>
                <label id="txtResponse" style="color:red"></label>
                <input id="inputValueJson" type="text" style="display:none"/>
            </div>
            <div class="col-sm-2" style="text-align:right">
                <input type="button" id="upload" class="btn btn-outline-primary btn-sm" style="margin-bottom:5px;display:none" onclick="UploadData()" value="Upload" />
            </div>
        </div>
        <div class="row">
            <div id="divResponsePrettyJSONFormat" class="col-md-12">
                <textarea class="form-control" id="responsePrettyJSONFormat" rows="10" readonly></textarea>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="col-md-12">
            <iframe id="ifrmDisplay" src=""></iframe>
        </div>
    </div>

    <div id="pdf_container"></div>
    <script type="text/javascript" src="~/lib/jquery/dist/jquery.min.js"></script>
    <script type="text/javascript" src="~/lib/pdf/pdf.min.js"></script>


    <script type="text/javascript">
        function GetData() {
            document.getElementById('getData').disabled = true;
            document.getElementById('getData').value = 'Sending...';

            var strMethodName = "POST"
            var strUrl = document.getElementById('txtURL').value
            var strJson = document.getElementById('prettyJSONFormat').value
            var strUser = document.getElementById('txtUserName').value
            document.getElementById('inputValueJson').value = strJson;
            //console.log(value);

            var url = "@Url.Action("PdfPartial", "Home")" + "?strMethodName=" + strMethodName + "&strUrl=" + strUrl + "&strJson=" + strJson + "&strUser=" + strUser + "";

            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, true);

            xhr.onreadystatechange = function (e) {
                if (this.status == 200) {
                    if (this.readyState == 4) {
                        //console.log(this)
                        //console.log(xhr)
                        var res = JSON.parse(xhr.response);

                        if (res.statusCode == 200) {
                            if (res.contentType == 'application/pdf') {
                                document.getElementById('ifrmDisplay').src = res.contentFilePreview;
                                document.getElementById('ifrmDisplay').style.height = '1000px'
                                document.getElementById("divResponsePrettyJSONFormat").style.display = "none"
                                document.getElementById("txtResponse").innerHTML = ''
                                var jsonInput = JSON.parse(document.getElementById('inputValueJson').value);
                                var txtChk = jsonInput.key.substring(1, 9);
                                console.log(txtChk);
                                if (txtChk == "PolicyNo")
                                {
                                    document.getElementById("upload").style.display = ""
                                    document.getElementById('upload').value = 'Upload';
                                    document.getElementById('upload').disabled = false;
                                }
                            } else if (res.contentType == 'text/plain') {
                                document.getElementById("divResponsePrettyJSONFormat").style.display = ""
                                document.getElementById('ifrmDisplay').style.height = '0px'
                                document.getElementById("responsePrettyJSONFormat").value = res.json;
                                printTheJSONInPrettyFormat2();
                                document.getElementById("txtResponse").innerHTML = ''
                            }
                        }
                        else {
                            var msg = res.statusCode + ' : ' + res.status;
                            document.getElementById("txtResponse").innerHTML = ' Status ' + msg;
                            document.getElementById('ifrmDisplay').style.height = '0px'
                            document.getElementById("responsePrettyJSONFormat").value = '';
                        }
                    }
                }
                else {
                    var resError = JSON.parse(xhr.response);
                    var msg = resError.statusCode + ' : ' + resError.status;
                    document.getElementById("txtResponse").innerHTML = ' Status ' + msg;
                    document.getElementById('ifrmDisplay').style.height = '0px'
                    document.getElementById("responsePrettyJSONFormat").value = '';
                }
                document.getElementById('getData').value = 'Send';
                document.getElementById('getData').disabled = false;
            };
            xhr.send();
        }

        function UploadData() {
            document.getElementById('upload').disabled = true;
            document.getElementById('upload').value = 'Uploading...';
            var strJson = document.getElementById('inputValueJson').value;
            var strUser = document.getElementById('txtUserName').value
            var url = "@Url.Action("UploadPDF", "Home")" + "?strJson=" + strJson + "&Username=" + strUser + "";

            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, true);
            xhr.onreadystatechange = function (e) {
                if (this.status == 200) {
                    if (this.readyState == 4) {
                        var res = JSON.parse(xhr.response);
                        if (res.statusCode == "200") {
                            document.getElementById("txtResponse").innerHTML = '';
                            document.getElementById('upload').disabled = true;
                            document.getElementById('upload').value = 'Uploaded';
                            alert(res.message);
                        } else {
                            var msg = res.statusCode + ' : ' + res.message;
                            document.getElementById("txtResponse").innerHTML = ' Status ' + msg;
                            document.getElementById('upload').value = 'Upload';
                            document.getElementById('upload').disabled = false;
                        }
                    }
                }
                else {
                    if (this.readyState == 4) {
                        var resError = JSON.parse(xhr.response);
                        var msg = resError.statusCode + ' : ' + resErro.message;
                        document.getElementById("txtResponse").innerHTML = ' Status ' + msg;
                        document.getElementById('upload').value = 'Upload';
                        document.getElementById('upload').disabled = false;
                    }
                }
            };
            xhr.send();
        }

        $(function () {
            $("#getData11").click(function () {
                var fileId = $(this).attr("test");
                //document.getElementById("ifrmDisplay").style.display = "none"
                $.ajax({
                    type: "POST",
                    url: "/Home/PdfPartial",
                    data: {
                        strMethodName: "POST",
                        strUrl: document.getElementById('txtURL').value,
                        strJson: document.getElementById('prettyJSONFormat').value,
                        strUser: document.getElementById('txtUserName').value
                    },
                    success: function (r) {
                        //console.log(r);
                        //var chkBox = document.getElementById("chkPreview").checked;
                        //console.log(chkBox);
                        //if (r.contentFile != null && !chkBox) {
                        //    document.getElementById("download").style.display = ''
                        //    var bytes = Base64ToBytes(r.contentFile);
                        //    LoadPdfFromBlob(bytes);
                        //} else
                        if (r.statusCode == 200) {
                            if (r.contentType == 'application/pdf') {
                                document.getElementById('ifrmDisplay').src = r.contentFilePreview;
                                document.getElementById('ifrmDisplay').style.height = '1000px'
                                document.getElementById("divResponsePrettyJSONFormat").style.display = "none"
                                document.getElementById("txtResponse").innerHTML = ''
                            } else if (r.contentType == 'text/plain') {
                                document.getElementById("divResponsePrettyJSONFormat").style.display = ""
                                document.getElementById('ifrmDisplay').style.height = '0px'
                                document.getElementById("responsePrettyJSONFormat").value = r.json;
                                printTheJSONInPrettyFormat2();
                                document.getElementById("txtResponse").innerHTML = ''
                            }
                        }
                        else {
                            var msg = r.statusCode + ' ' + r.status;
                            document.getElementById("txtResponse").innerHTML = ' Status ' + msg;
                            document.getElementById('ifrmDisplay').style.height = '0px'
                            document.getElementById("responsePrettyJSONFormat").value = '';
                        }

                        console.log(r);
                    },
                    failure: function (response) {
                        alert("Error 1");
                    },
                    error: function (response) {
                        //alert(response.responseText);
                        alert("Error 2");
                        console.log(response);
                    }
                });
            });
        });

        $(function () {
            $("#chkPreview").click(function () {
                if (document.getElementById("chkPreview").checked) {
                    document.getElementById("pdf_container").style.display = "none"
                    document.getElementById("ifrmDisplay").style.display = ""
                } else {
                    document.getElementById("ifrmDisplay").style.display = "none"
                    document.getElementById("pdf_container").style.display = ""
                }
            });
        });

        var pdfjsLib = window['pdfjs-dist/build/pdf'];
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.worker.min.js';
        var pdfDoc = null;
        var scale = 1; //Set Scale for zooming PDF.
        var resolution = 1; //Set Resolution to Adjust PDF clarity.

        function LoadPdfFromBlob(blob) {
            //Read PDF from BLOB.
            pdfjsLib.getDocument({ data: blob }).promise.then(function (pdfDoc_) {
                pdfDoc = pdfDoc_;

                //Reference the Container DIV.
                var pdf_container = document.getElementById("pdf_container");
                pdf_container.innerHTML = "";
                pdf_container.style.display = "block";

                //Loop and render all pages.
                for (var i = 1; i <= pdfDoc.numPages; i++) {
                    RenderPage(pdf_container, i);
                }
            });
        };
        function RenderPage(pdf_container, num) {
            pdfDoc.getPage(num).then(function (page) {
                //Create Canvas element and append to the Container DIV.
                var canvas = document.createElement('canvas');
                canvas.id = 'pdf-' + num;
                ctx = canvas.getContext('2d');
                pdf_container.appendChild(canvas);

                //Create and add empty DIV to add SPACE between pages.
                var spacer = document.createElement("div");
                spacer.style.height = "20px";
                pdf_container.appendChild(spacer);

                //Set the Canvas dimensions using ViewPort and Scale.
                var viewport = page.getViewport({ scale: scale });
                canvas.height = resolution * viewport.height;
                canvas.width = resolution * viewport.width;

                //Render the PDF page.
                var renderContext = {
                    canvasContext: ctx,
                    viewport: viewport,
                    transform: [resolution, 0, 0, resolution, 0, 0]
                };

                page.render(renderContext);
            });
        };

        function Base64ToBytes(base64) {
            var s = window.atob(base64);
            var bytes = new Uint8Array(s.length);
            for (var i = 0; i < s.length; i++) {
                bytes[i] = s.charCodeAt(i);
            }
            return bytes;
        };

        function printTheJSONInPrettyFormat() {
            var badJSON = document.getElementById('prettyJSONFormat').value;
            if (badJSON != null && badJSON != "") {
                var parseJSON = JSON.parse(badJSON);
                var JSONInPrettyFormat = JSON.stringify(parseJSON, undefined, 4);
                document.getElementById('prettyJSONFormat').value =
                    JSONInPrettyFormat;
            }
        }

        function printTheJSONInPrettyFormat2() {
            var badJSON = document.getElementById('responsePrettyJSONFormat').value;
            if (badJSON != null && badJSON != "") {
                var parseJSON = JSON.parse(badJSON);
                var JSONInPrettyFormat = JSON.stringify(parseJSON, undefined, 4);
                document.getElementById('responsePrettyJSONFormat').value =
                    JSONInPrettyFormat;
            }
        }

    </script>

</body>
</html>
